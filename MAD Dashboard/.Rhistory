select(chatid,BenchMark_Anger,BenchMark_Happy,Model_Anger,Model_Happy) %>% filter(!is.na(Model_Anger) | !is.na(Model_Happy)) %>%
mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger],Model_Happy=as.numeric(levels(Model_Happy))[Model_Happy]) %>%
group_by(chatid) %>% summarise(Anger=sum(Model_Anger),Happy=sum(Model_Happy)) %>%
mutate(Tot=Anger+Happy,Anger_Percent=round(Anger/Tot*100,0),Happiness_Percent=round(Happy/Tot*100)) %>%
left_join(slope_est,by=c("chatid"="chatid"))
Aggregated_Result %>%
select(chatid,BenchMark_Anger,BenchMark_Happy,Model_Anger,Model_Happy) %>% filter(!is.na(Model_Anger) | !is.na(Model_Happy)) %>%
mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger],Model_Happy=as.numeric(levels(Model_Happy))[Model_Happy]) %>%
group_by(chatid) %>% summarise(Anger=sum(Model_Anger),Happy=sum(Model_Happy)) %>%
mutate(Tot=Anger+Happy,Anger_Percent=round(Anger/Tot*100,0),Happiness_Percent=round(Happy/Tot*100)) %>%
left_join(slope_est,by=c("chatid"="chatid"))
Aggregated_Result %>%
select(chatid,BenchMark_Anger,BenchMark_Happy,Model_Anger,Model_Happy) %>% filter(!is.na(Model_Anger) | !is.na(Model_Happy)) %>%
mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger],Model_Happy=as.numeric(levels(Model_Happy))[Model_Happy]) %>%
group_by(chatid) %>% summarise(Anger=sum(Model_Anger),Happy=sum(Model_Happy)) %>%
mutate(Tot=Anger+Happy,Anger_Percent=round(Anger/Tot*100,0),Happiness_Percent=round(Happy/Tot*100)) %>%
left_join(slope_est,by=c("chatid"="chatid")) %>%
inner_join(Aggregated_Result %>% filter(user!="Bot") %>% distinct(chatid,user),by = c("chatid"="chatid"))
Aggregated_Result %>%
select(chatid,BenchMark_Anger,BenchMark_Happy,Model_Anger,Model_Happy) %>% filter(!is.na(Model_Anger) | !is.na(Model_Happy)) %>%
mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger],Model_Happy=as.numeric(levels(Model_Happy))[Model_Happy]) %>%
group_by(chatid) %>% summarise(Anger=sum(Model_Anger),Happy=sum(Model_Happy),chat_length=max(chatorder))
Aggregated_Result %>%
select(chatid,chatorder,BenchMark_Anger,BenchMark_Happy,Model_Anger,Model_Happy) %>% filter(!is.na(Model_Anger) | !is.na(Model_Happy)) %>%
mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger],Model_Happy=as.numeric(levels(Model_Happy))[Model_Happy]) %>%
group_by(chatid) %>% summarise(Anger=sum(Model_Anger),Happy=sum(Model_Happy),chat_length=max(chatorder))
Aggregated_Result %>%
select(chatid,chatorder,BenchMark_Anger,BenchMark_Happy,Model_Anger,Model_Happy) %>% filter(!is.na(Model_Anger) | !is.na(Model_Happy)) %>%
mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger],Model_Happy=as.numeric(levels(Model_Happy))[Model_Happy]) %>%
group_by(chatid) %>% summarise(Anger=sum(Model_Anger),Happy=sum(Model_Happy),chat_length=max(chatorder)) %>%
mutate(Tot=Anger+Happy,Anger_Percent=round(Anger/Tot*100,0),Happiness_Percent=round(Happy/Tot*100)) %>%
left_join(slope_est,by=c("chatid"="chatid")) %>%
inner_join(Aggregated_Result %>% filter(user!="Bot") %>% distinct(chatid,user),by = c("chatid"="chatid")) %>%
mutate(Rage_Rate=if_else(is.na(Rage_Rate),-999,round(Rage_Rate,2)), Warning = if_else((Rage_Rate>3.9 & Anger_Percent>50) | (is.na(Rage_Rate)& Anger_Percent>50) | (Anger_Percent>50 | Rage_Rate>3.9),"Yes","No")) %>%
mutate(Rage_Rate=replace(Rage_Rate,Rage_Rate==-999,NA),Rage_Rate=replace(Rage_Rate,Rage_Rate<0.09,"Negligable")) %>%
select(chatid,user,chat_length,Anger_Percent,Happiness_Percent,Rage_Rate,Warning)
ui <- shinyUI(
dashboardPage(
dashboardHeader(title = "MAD Dashboard"),
dashboardSidebar(
sidebarMenu(id="sidetabs",
menuItem("Chat Overview", tabName = "ChatOverviewScreen", icon = icon("columns")),
menuItem("Chat Details", tabName = "ChatDetailScreen", icon = icon("search")),
menuItem("Analyst Tab", tabName = "AnalystScreen", icon = icon("search")))
),
dashboardBody(
tabItems(
tabItem(tabName = "ChatOverviewScreen",
fluidRow(
column(dataTableOutput("ChatOverview"),width = 12))
),
tabItem(tabName = "ChatDetailScreen",
fluidRow(
selectInput("SelChat","Select Chat",chatid_list$chatid),
actionButton("Back",label = "Back")),
fluidRow(
column(plotlyOutput("CrossChat"),width = 6),
column(plotOutput("AngerVSHappy"),width = 3),
column(plotOutput("KeyWords"),width = 3)),
fluidRow(
column(dataTableOutput("ChatDetail"),width = 12))
),
tabItem(tabName = "AnalystScreen",
fluidRow(
column(selectInput("SelDeepChat","Select Chat",chatid_list$chatid),width = 4),
column(selectInput("SelDeepChatOrder","Select Chat Order",choices = c(1:1)),width = 4)
),
fluidRow(actionButton("BackDeep",label = "Back")),
fluidRow(
column(dataTableOutput("AnalystOverview"),width = 12))
)
)
)
)
)
server <- shinyServer(function(input,output,session){
output$ChatOverview <- renderDataTable({
slope_est <- Aggregated_Result %>%
select(chatid,chatorder,Model_Anger) %>% mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger]) %>%
filter(!is.na(Model_Anger) & Model_Anger>0) %>% group_by(chatid) %>% filter(n()>1) %>% nest() %>%
mutate(model = map(data, ~lm( Model_Anger~chatorder, data = .) %>% tidy)) %>% unnest(model) %>%
filter(term=="chatorder") %>% select(chatid,estimate) %>% rename(Rage_Rate=estimate) %>% mutate(Rage_Rate=Rage_Rate*100)
Aggregated_Result %>%
select(chatid,chatorder,BenchMark_Anger,BenchMark_Happy,Model_Anger,Model_Happy) %>% filter(!is.na(Model_Anger) | !is.na(Model_Happy)) %>%
mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger],Model_Happy=as.numeric(levels(Model_Happy))[Model_Happy]) %>%
group_by(chatid) %>% summarise(Anger=sum(Model_Anger),Happy=sum(Model_Happy),chat_length=max(chatorder)) %>%
mutate(Tot=Anger+Happy,Anger_Percent=round(Anger/Tot*100,0),Happiness_Percent=round(Happy/Tot*100)) %>%
left_join(slope_est,by=c("chatid"="chatid")) %>%
inner_join(Aggregated_Result %>% filter(user!="Bot") %>% distinct(chatid,user),by = c("chatid"="chatid")) %>%
mutate(Rage_Rate=if_else(is.na(Rage_Rate),-999,round(Rage_Rate,2)), Warning = if_else((Rage_Rate>3.9 & Anger_Percent>50) | (is.na(Rage_Rate)& Anger_Percent>50) | (Anger_Percent>50 | Rage_Rate>3.9),"Yes","No")) %>%
mutate(Rage_Rate=replace(Rage_Rate,Rage_Rate==-999,NA),Rage_Rate=replace(Rage_Rate,Rage_Rate<0.09,"Negligable")) %>%
select(chatid,user,chat_length,Anger_Percent,Happiness_Percent,Rage_Rate,Warning)  },escape = F#,selection ='single'
,callback = "function(table) {
table.on('click.dt', 'tr', function() {
table.$('tr.selected').removeClass('selected');
$(this).toggleClass('selected');
Shiny.onInputChange('selectrows',
table.rows('.selected').data()[0][0]);
});
}"
,options = list(rowCallback=I( 'function(row, data) { if (data[5] == "Yes") $("td", row).css("background", "lightsalmon");}'))
)
observeEvent(input$selectrows, {
updateSelectInput(session,inputId = "SelChat",selected = trimws(input$selectrows))
#updateTabsetPanel(session,inputId = "ChatDetailScreen", selected = "ChatDetailScreen")
updateTabItems(session,inputId ="sidetabs",selected = "ChatDetailScreen" )
})
output$ChatDetail <- renderDataTable({
Aggregated_Result %>% select(chatid,user,chatorder,text,BenchMark_Anger,BenchMark_Happy,Model_Anger,Model_Happy) %>% filter(chatid==input$SelChat) },escape = F,
callback = "function(table) {
table.on('click.dt', 'tr', function() {
table.$('tr.selected').removeClass('selected');
$(this).toggleClass('selected');
Shiny.onInputChange('selectchatid',
table.rows('.selected').data()[0][0]);
Shiny.onInputChange('selectchatorder',
table.rows('.selected').data()[0][2]);
});
}"
,options = list(rowCallback=I( 'function(row, data) { if (data[6] == 4 | data[6] == 5) $("td", row).css("background", "Tomato");else if (data[6] == 2 | data[6] == 3) $("td", row).css("background", "lightsalmon");else if (data[6] == 1) $("td", row).css("background", "pink");}'))
)
observeEvent(input$Back,{
updateTabItems(session,inputId ="sidetabs",selected = "ChatOverviewScreen" )
})
output$CrossChat <- renderPlotly({
CrossChat_graph <- Aggregated_Result %>%
filter(chatid==input$SelChat & ( !is.na(Model_Anger) | !is.na(Model_Happy))) %>%
select(chatorder,Model_Anger,Model_Happy) %>%
mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger],Model_Happy=as.numeric(levels(Model_Happy))[Model_Happy],Model_Anger=Model_Anger * (-1)) %>%
ggplot() +
geom_line(mapping =  aes(x=chatorder,y=Model_Anger),size=1,color="red")+
geom_line(mapping =  aes(x=chatorder,y=Model_Happy),size=1,color="green")+
geom_point(mapping =  aes(x=chatorder,y=Model_Anger),color='tomato')+
geom_point(mapping =  aes(x=chatorder,y=Model_Happy),color='yellowgreen')+
geom_hline(yintercept =0,color="black",size=1)+
ggplot2::annotate("text",x=3,y=5, label= "Happiness",color="springgreen3")+
ggplot2::annotate("text",x=3,y=-5, label= "Anger",color="tomato")+
labs(x = "Chat Order", y = "Emotion")+
scale_y_continuous(breaks=seq(-5,5,1))+
scale_x_continuous(breaks=seq(-5,Aggregated_Result %>% filter(chatid==input$SelChat & ( !is.na(Model_Anger) | !is.na(Model_Happy))) %>%
summarise(max(chatorder)) %>% as.integer(),1))+
ggtitle("CROSS CHAT SCORES")+
theme_classic()+
theme(  panel.background = element_rect(fill = "aliceblue"))
ggplotly(CrossChat_graph)
})
output$AngerVSHappy <- renderPlot({
Aggregated_Result %>%
select(chatid,Model_Anger,Model_Happy) %>%
filter(chatid==input$SelChat & ( !is.na(Model_Anger) | !is.na(Model_Happy))) %>%
mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger],Model_Happy=as.numeric(levels(Model_Happy))[Model_Happy]) %>%
group_by(chatid) %>%
summarise(Anger=sum(Model_Anger),Happy=sum(Model_Happy)) %>%
mutate(Tot=Anger+Happy,Anger=Anger/Tot,Happy=Happy/Tot) %>%
pivot_longer(c("Anger","Happy"),names_to = "Emotion",values_to = "Percent") %>%
ggplot()+
geom_bar(aes(x=Emotion,y=Percent,fill=Emotion),stat="identity",show.legend = F)+
geom_text(aes(x=Emotion,y = Percent/1.1,label=paste(round(Percent*100,2),"%")),size=7 )+
coord_flip()+
ggtitle("Happiness VS Anger")+
theme_classic()+
theme(  panel.background = element_rect(fill = "aliceblue"))
})
output$KeyWords <- renderPlot({
wordcloud(words = tidy_data_idf %>% filter(chatid==input$SelChat) %>% .$word, freq = tidy_data_idf %>% filter(chatid==input$SelChat) %>% .$tf_idf, min.freq = 1,max.words=30, random.order=FALSE, rot.per=0, colors=brewer.pal(5, "Dark2"),scale = c(2,1))+title((main = list("KEY WORDS", cex = 1.5, font = 20)))
})
observeEvent(input$selectchatorder, {
updateSelectInput(session,inputId = "SelDeepChat",selected = trimws(input$selectchatid))
updateSelectInput(session,inputId = "SelDeepChatOrder",choices = Aggregated_Result %>% filter(chatid==trimws(input$selectchatid)) %>% select(chatorder) %>% as.list(),selected = trimws(input$selectchatorder))
updateTabItems(session,inputId ="sidetabs",selected = "AnalystScreen" )
})
observeEvent(input$BackDeep,{
updateTabItems(session,inputId ="sidetabs",selected = "ChatDetailScreen" )
})
output$AnalystOverview <- renderDataTable({
Aggregated_Result %>% select(chatid,chatorder,angry,Anger,happy,Joy) %>%
rename(ParalleDot_Anger=angry,IBM_Anger=Anger,ParalleDot_Happy=happy,IBM_Happy=Joy)  %>%
filter(chatid==input$SelDeepChat,chatorder==input$SelDeepChatOrder)
})
})
shinyApp(ui = ui, server = server)
ui <- shinyUI(
dashboardPage(
dashboardHeader(title = "MAD Dashboard"),
dashboardSidebar(
sidebarMenu(id="sidetabs",
menuItem("Chat Overview", tabName = "ChatOverviewScreen", icon = icon("columns")),
menuItem("Chat Details", tabName = "ChatDetailScreen", icon = icon("search")),
menuItem("Analyst Tab", tabName = "AnalystScreen", icon = icon("search")))
),
dashboardBody(
tabItems(
tabItem(tabName = "ChatOverviewScreen",
fluidRow(
column(dataTableOutput("ChatOverview"),width = 12))
),
tabItem(tabName = "ChatDetailScreen",
fluidRow(
selectInput("SelChat","Select Chat",chatid_list$chatid),
actionButton("Back",label = "Back")),
fluidRow(
column(plotlyOutput("CrossChat"),width = 6),
column(plotOutput("AngerVSHappy"),width = 3),
column(plotOutput("KeyWords"),width = 3)),
fluidRow(
column(dataTableOutput("ChatDetail"),width = 12))
),
tabItem(tabName = "AnalystScreen",
fluidRow(
column(selectInput("SelDeepChat","Select Chat",chatid_list$chatid),width = 4),
column(selectInput("SelDeepChatOrder","Select Chat Order",choices = c(1:1)),width = 4)
),
fluidRow(actionButton("BackDeep",label = "Back")),
fluidRow(
column(dataTableOutput("AnalystOverview"),width = 12))
)
)
)
)
)
server <- shinyServer(function(input,output,session){
output$ChatOverview <- renderDataTable({
slope_est <- Aggregated_Result %>%
select(chatid,chatorder,Model_Anger) %>% mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger]) %>%
filter(!is.na(Model_Anger) & Model_Anger>0) %>% group_by(chatid) %>% filter(n()>1) %>% nest() %>%
mutate(model = map(data, ~lm( Model_Anger~chatorder, data = .) %>% tidy)) %>% unnest(model) %>%
filter(term=="chatorder") %>% select(chatid,estimate) %>% rename(Rage_Rate=estimate) %>% mutate(Rage_Rate=Rage_Rate*100)
Aggregated_Result %>%
select(chatid,chatorder,BenchMark_Anger,BenchMark_Happy,Model_Anger,Model_Happy) %>% filter(!is.na(Model_Anger) | !is.na(Model_Happy)) %>%
mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger],Model_Happy=as.numeric(levels(Model_Happy))[Model_Happy]) %>%
group_by(chatid) %>% summarise(Anger=sum(Model_Anger),Happy=sum(Model_Happy),chat_length=max(chatorder)) %>%
mutate(Tot=Anger+Happy,Anger_Percent=round(Anger/Tot*100,0),Happiness_Percent=round(Happy/Tot*100)) %>%
left_join(slope_est,by=c("chatid"="chatid")) %>%
inner_join(Aggregated_Result %>% filter(user!="Bot") %>% distinct(chatid,user),by = c("chatid"="chatid")) %>%
mutate(Rage_Rate=if_else(is.na(Rage_Rate),-999,round(Rage_Rate,2)), Warning = if_else((Rage_Rate>3.9 & Anger_Percent>50) | (is.na(Rage_Rate)& Anger_Percent>50) | (Anger_Percent>50 | Rage_Rate>3.9),"Yes","No")) %>%
mutate(Rage_Rate=replace(Rage_Rate,Rage_Rate==-999,NA),Rage_Rate=replace(Rage_Rate,Rage_Rate<0.09,"Negligable")) %>%
select(chatid,user,chat_length,Anger_Percent,Happiness_Percent,Rage_Rate,Warning)  },escape = F#,selection ='single'
,callback = "function(table) {
table.on('click.dt', 'tr', function() {
table.$('tr.selected').removeClass('selected');
$(this).toggleClass('selected');
Shiny.onInputChange('selectrows',
table.rows('.selected').data()[0][0]);
});
}"
,options = list(rowCallback=I( 'function(row, data) { if (data[6] == "Yes") $("td", row).css("background", "lightsalmon");}'))
)
observeEvent(input$selectrows, {
updateSelectInput(session,inputId = "SelChat",selected = trimws(input$selectrows))
#updateTabsetPanel(session,inputId = "ChatDetailScreen", selected = "ChatDetailScreen")
updateTabItems(session,inputId ="sidetabs",selected = "ChatDetailScreen" )
})
output$ChatDetail <- renderDataTable({
Aggregated_Result %>% select(chatid,user,chatorder,text,BenchMark_Anger,BenchMark_Happy,Model_Anger,Model_Happy) %>% filter(chatid==input$SelChat) },escape = F,
callback = "function(table) {
table.on('click.dt', 'tr', function() {
table.$('tr.selected').removeClass('selected');
$(this).toggleClass('selected');
Shiny.onInputChange('selectchatid',
table.rows('.selected').data()[0][0]);
Shiny.onInputChange('selectchatorder',
table.rows('.selected').data()[0][2]);
});
}"
,options = list(rowCallback=I( 'function(row, data) { if (data[6] == 4 | data[6] == 5) $("td", row).css("background", "Tomato");else if (data[6] == 2 | data[6] == 3) $("td", row).css("background", "lightsalmon");else if (data[6] == 1) $("td", row).css("background", "pink");}'))
)
observeEvent(input$Back,{
updateTabItems(session,inputId ="sidetabs",selected = "ChatOverviewScreen" )
})
output$CrossChat <- renderPlotly({
CrossChat_graph <- Aggregated_Result %>%
filter(chatid==input$SelChat & ( !is.na(Model_Anger) | !is.na(Model_Happy))) %>%
select(chatorder,Model_Anger,Model_Happy) %>%
mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger],Model_Happy=as.numeric(levels(Model_Happy))[Model_Happy],Model_Anger=Model_Anger * (-1)) %>%
ggplot() +
geom_line(mapping =  aes(x=chatorder,y=Model_Anger),size=1,color="red")+
geom_line(mapping =  aes(x=chatorder,y=Model_Happy),size=1,color="green")+
geom_point(mapping =  aes(x=chatorder,y=Model_Anger),color='tomato')+
geom_point(mapping =  aes(x=chatorder,y=Model_Happy),color='yellowgreen')+
geom_hline(yintercept =0,color="black",size=1)+
ggplot2::annotate("text",x=3,y=5, label= "Happiness",color="springgreen3")+
ggplot2::annotate("text",x=3,y=-5, label= "Anger",color="tomato")+
labs(x = "Chat Order", y = "Emotion")+
scale_y_continuous(breaks=seq(-5,5,1))+
scale_x_continuous(breaks=seq(-5,Aggregated_Result %>% filter(chatid==input$SelChat & ( !is.na(Model_Anger) | !is.na(Model_Happy))) %>%
summarise(max(chatorder)) %>% as.integer(),1))+
ggtitle("CROSS CHAT SCORES")+
theme_classic()+
theme(  panel.background = element_rect(fill = "aliceblue"))
ggplotly(CrossChat_graph)
})
output$AngerVSHappy <- renderPlot({
Aggregated_Result %>%
select(chatid,Model_Anger,Model_Happy) %>%
filter(chatid==input$SelChat & ( !is.na(Model_Anger) | !is.na(Model_Happy))) %>%
mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger],Model_Happy=as.numeric(levels(Model_Happy))[Model_Happy]) %>%
group_by(chatid) %>%
summarise(Anger=sum(Model_Anger),Happy=sum(Model_Happy)) %>%
mutate(Tot=Anger+Happy,Anger=Anger/Tot,Happy=Happy/Tot) %>%
pivot_longer(c("Anger","Happy"),names_to = "Emotion",values_to = "Percent") %>%
ggplot()+
geom_bar(aes(x=Emotion,y=Percent,fill=Emotion),stat="identity",show.legend = F)+
geom_text(aes(x=Emotion,y = Percent/1.1,label=paste(round(Percent*100,2),"%")),size=7 )+
coord_flip()+
ggtitle("Happiness VS Anger")+
theme_classic()+
theme(  panel.background = element_rect(fill = "aliceblue"))
})
output$KeyWords <- renderPlot({
wordcloud(words = tidy_data_idf %>% filter(chatid==input$SelChat) %>% .$word, freq = tidy_data_idf %>% filter(chatid==input$SelChat) %>% .$tf_idf, min.freq = 1,max.words=30, random.order=FALSE, rot.per=0, colors=brewer.pal(5, "Dark2"),scale = c(2,1))+title((main = list("KEY WORDS", cex = 1.5, font = 20)))
})
observeEvent(input$selectchatorder, {
updateSelectInput(session,inputId = "SelDeepChat",selected = trimws(input$selectchatid))
updateSelectInput(session,inputId = "SelDeepChatOrder",choices = Aggregated_Result %>% filter(chatid==trimws(input$selectchatid)) %>% select(chatorder) %>% as.list(),selected = trimws(input$selectchatorder))
updateTabItems(session,inputId ="sidetabs",selected = "AnalystScreen" )
})
observeEvent(input$BackDeep,{
updateTabItems(session,inputId ="sidetabs",selected = "ChatDetailScreen" )
})
output$AnalystOverview <- renderDataTable({
Aggregated_Result %>% select(chatid,chatorder,angry,Anger,happy,Joy) %>%
rename(ParalleDot_Anger=angry,IBM_Anger=Anger,ParalleDot_Happy=happy,IBM_Happy=Joy)  %>%
filter(chatid==input$SelDeepChat,chatorder==input$SelDeepChatOrder)
})
})
shinyApp(ui = ui, server = server)
#install.packages("unpivotr")
library(tidyverse)
library(httr)
library(jsonlite)
library(tidyverse)
library(dplyr)
library(tidytext)
library(ggplot2)
library(unpivotr)
library(randomForest)
library(corrplot)
library(corrr)
library(caret)
library(irr)
library(modelr)
library(shiny)
library(shinydashboard)
library(plotly)
library(tidytext)
library(wordcloud)
#install.packages("unpivotr")
library(tidyverse)
library(httr)
library(jsonlite)
library(tidyverse)
library(dplyr)
library(tidytext)
library(ggplot2)
library(unpivotr)
library(randomForest)
library(corrplot)
library(corrr)
library(caret)
library(irr)
library(modelr)
library(shiny)
library(shinydashboard)
library(plotly)
library(tidytext)
library(wordcloud)
ui <- shinyUI(
dashboardPage(
dashboardHeader(title = "MAD Dashboard"),
dashboardSidebar(
sidebarMenu(id="sidetabs",
menuItem("Chat Overview", tabName = "ChatOverviewScreen", icon = icon("columns")),
menuItem("Chat Details", tabName = "ChatDetailScreen", icon = icon("search")),
menuItem("Analyst Tab", tabName = "AnalystScreen", icon = icon("search")))
),
dashboardBody(
tabItems(
tabItem(tabName = "ChatOverviewScreen",
fluidRow(
column(dataTableOutput("ChatOverview"),width = 12))
),
tabItem(tabName = "ChatDetailScreen",
fluidRow(
selectInput("SelChat","Select Chat",chatid_list$chatid),
actionButton("Back",label = "Back")),
fluidRow(
column(plotlyOutput("CrossChat"),width = 6),
column(plotOutput("AngerVSHappy"),width = 3),
column(plotOutput("KeyWords"),width = 3)),
fluidRow(
column(dataTableOutput("ChatDetail"),width = 12))
),
tabItem(tabName = "AnalystScreen",
fluidRow(
column(selectInput("SelDeepChat","Select Chat",chatid_list$chatid),width = 4),
column(selectInput("SelDeepChatOrder","Select Chat Order",choices = c(1:1)),width = 4)
),
fluidRow(actionButton("BackDeep",label = "Back")),
fluidRow(
column(dataTableOutput("AnalystOverview"),width = 12))
)
)
)
)
)
server <- shinyServer(function(input,output,session){
output$ChatOverview <- renderDataTable({
slope_est <- Aggregated_Result %>%
select(chatid,chatorder,Model_Anger) %>% mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger]) %>%
filter(!is.na(Model_Anger) & Model_Anger>0) %>% group_by(chatid) %>% filter(n()>1) %>% nest() %>%
mutate(model = map(data, ~lm( Model_Anger~chatorder, data = .) %>% tidy)) %>% unnest(model) %>%
filter(term=="chatorder") %>% select(chatid,estimate) %>% rename(Rage_Rate=estimate) %>% mutate(Rage_Rate=Rage_Rate*100)
Aggregated_Result %>%
select(chatid,chatorder,BenchMark_Anger,BenchMark_Happy,Model_Anger,Model_Happy) %>% filter(!is.na(Model_Anger) | !is.na(Model_Happy)) %>%
mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger],Model_Happy=as.numeric(levels(Model_Happy))[Model_Happy]) %>%
group_by(chatid) %>% summarise(Anger=sum(Model_Anger),Happy=sum(Model_Happy),chat_length=max(chatorder)) %>%
mutate(Tot=Anger+Happy,Anger_Percent=round(Anger/Tot*100,0),Happiness_Percent=round(Happy/Tot*100)) %>%
left_join(slope_est,by=c("chatid"="chatid")) %>%
inner_join(Aggregated_Result %>% filter(user!="Bot") %>% distinct(chatid,user),by = c("chatid"="chatid")) %>%
mutate(Rage_Rate=if_else(is.na(Rage_Rate),-999,round(Rage_Rate,2)), Warning = if_else((Rage_Rate>3.9 & Anger_Percent>50) | (is.na(Rage_Rate)& Anger_Percent>50) | (Anger_Percent>50 | Rage_Rate>3.9),"Yes","No")) %>%
mutate(Rage_Rate=replace(Rage_Rate,Rage_Rate==-999,NA),Rage_Rate=replace(Rage_Rate,Rage_Rate<0.09,"Negligable")) %>%
select(chatid,user,chat_length,Anger_Percent,Happiness_Percent,Rage_Rate,Warning)  },escape = F#,selection ='single'
,callback = "function(table) {
table.on('click.dt', 'tr', function() {
table.$('tr.selected').removeClass('selected');
$(this).toggleClass('selected');
Shiny.onInputChange('selectrows',
table.rows('.selected').data()[0][0]);
});
}"
,options = list(rowCallback=I( 'function(row, data) { if (data[6] == "Yes") $("td", row).css("background", "lightsalmon");}'))
)
observeEvent(input$selectrows, {
updateSelectInput(session,inputId = "SelChat",selected = trimws(input$selectrows))
#updateTabsetPanel(session,inputId = "ChatDetailScreen", selected = "ChatDetailScreen")
updateTabItems(session,inputId ="sidetabs",selected = "ChatDetailScreen" )
})
output$ChatDetail <- renderDataTable({
Aggregated_Result %>% select(chatid,user,chatorder,text,BenchMark_Anger,BenchMark_Happy,Model_Anger,Model_Happy) %>% filter(chatid==input$SelChat) },escape = F,
callback = "function(table) {
table.on('click.dt', 'tr', function() {
table.$('tr.selected').removeClass('selected');
$(this).toggleClass('selected');
Shiny.onInputChange('selectchatid',
table.rows('.selected').data()[0][0]);
Shiny.onInputChange('selectchatorder',
table.rows('.selected').data()[0][2]);
});
}"
,options = list(rowCallback=I( 'function(row, data) { if (data[6] == 4 | data[6] == 5) $("td", row).css("background", "Tomato");else if (data[6] == 2 | data[6] == 3) $("td", row).css("background", "lightsalmon");else if (data[6] == 1) $("td", row).css("background", "pink");}'))
)
observeEvent(input$Back,{
updateTabItems(session,inputId ="sidetabs",selected = "ChatOverviewScreen" )
})
output$CrossChat <- renderPlotly({
CrossChat_graph <- Aggregated_Result %>%
filter(chatid==input$SelChat & ( !is.na(Model_Anger) | !is.na(Model_Happy))) %>%
select(chatorder,Model_Anger,Model_Happy) %>%
mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger],Model_Happy=as.numeric(levels(Model_Happy))[Model_Happy],Model_Anger=Model_Anger * (-1)) %>%
ggplot() +
geom_line(mapping =  aes(x=chatorder,y=Model_Anger),size=1,color="red")+
geom_line(mapping =  aes(x=chatorder,y=Model_Happy),size=1,color="green")+
geom_point(mapping =  aes(x=chatorder,y=Model_Anger),color='tomato')+
geom_point(mapping =  aes(x=chatorder,y=Model_Happy),color='yellowgreen')+
geom_hline(yintercept =0,color="black",size=1)+
ggplot2::annotate("text",x=3,y=5, label= "Happiness",color="springgreen3")+
ggplot2::annotate("text",x=3,y=-5, label= "Anger",color="tomato")+
labs(x = "Chat Order", y = "Emotion")+
scale_y_continuous(breaks=seq(-5,5,1))+
scale_x_continuous(breaks=seq(-5,Aggregated_Result %>% filter(chatid==input$SelChat & ( !is.na(Model_Anger) | !is.na(Model_Happy))) %>%
summarise(max(chatorder)) %>% as.integer(),1))+
ggtitle("CROSS CHAT SCORES")+
theme_classic()+
theme(  panel.background = element_rect(fill = "aliceblue"))
ggplotly(CrossChat_graph)
})
output$AngerVSHappy <- renderPlot({
Aggregated_Result %>%
select(chatid,Model_Anger,Model_Happy) %>%
filter(chatid==input$SelChat & ( !is.na(Model_Anger) | !is.na(Model_Happy))) %>%
mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger],Model_Happy=as.numeric(levels(Model_Happy))[Model_Happy]) %>%
group_by(chatid) %>%
summarise(Anger=sum(Model_Anger),Happy=sum(Model_Happy)) %>%
mutate(Tot=Anger+Happy,Anger=Anger/Tot,Happy=Happy/Tot) %>%
pivot_longer(c("Anger","Happy"),names_to = "Emotion",values_to = "Percent") %>%
ggplot()+
geom_bar(aes(x=Emotion,y=Percent,fill=Emotion),stat="identity",show.legend = F)+
geom_text(aes(x=Emotion,y = Percent/1.1,label=paste(round(Percent*100,2),"%")),size=7 )+
coord_flip()+
ggtitle("Happiness VS Anger")+
theme_classic()+
theme(  panel.background = element_rect(fill = "aliceblue"))
})
output$KeyWords <- renderPlot({
wordcloud(words = tidy_data_idf %>% filter(chatid==input$SelChat) %>% .$word, freq = tidy_data_idf %>% filter(chatid==input$SelChat) %>% .$tf_idf, min.freq = 1,max.words=30, random.order=FALSE, rot.per=0, colors=brewer.pal(5, "Dark2"),scale = c(2,1))+title((main = list("KEY WORDS", cex = 1.5, font = 20)))
})
observeEvent(input$selectchatorder, {
updateSelectInput(session,inputId = "SelDeepChat",selected = trimws(input$selectchatid))
updateSelectInput(session,inputId = "SelDeepChatOrder",choices = Aggregated_Result %>% filter(chatid==trimws(input$selectchatid)) %>% select(chatorder) %>% as.list(),selected = trimws(input$selectchatorder))
updateTabItems(session,inputId ="sidetabs",selected = "AnalystScreen" )
})
observeEvent(input$BackDeep,{
updateTabItems(session,inputId ="sidetabs",selected = "ChatDetailScreen" )
})
output$AnalystOverview <- renderDataTable({
Aggregated_Result %>% select(chatid,chatorder,angry,Anger,happy,Joy) %>%
rename(ParalleDot_Anger=angry,IBM_Anger=Anger,ParalleDot_Happy=happy,IBM_Happy=Joy)  %>%
filter(chatid==input$SelDeepChat,chatorder==input$SelDeepChatOrder)
})
})
shinyApp(ui = ui, server = server)
save(tidy_data_idf,file="Bkp\\tidy_data_idf.rda")
